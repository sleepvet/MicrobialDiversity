###co
cd $(cat $rawpath) #clipdata所在目录
mkdir -p ../01assembly/co
mkdir -p ../05bin/rawbin
zcat *1.fq.gz|seqtk seq -a >> ../01assembly/co/1.fa &
zcat *2.fq.gz|seqtk seq -a >> ../01assembly/co/2.fa
megahit --kmin-1pass -m 0.9 --k-list 27,37,47,57,67,77,87 --min-contig-len 1000 -t 96 -1 ../01assembly/co/1.fa -2 ../01assembly/co/2.fa -o ../01assembly/co/co
rm -r ../01assembly/co/co/intermediate_contigs
echo "coassembly"
Time
#single
mkdir -p ../01assembly/single
mkdir ../05bin/mergedfa
mkdir ../01assembly/bowtiedb/
for i in $samplelist 
do
megahit --kmin-1pass -m 0.9 --k-list 27,37,47,57,67,77,87 --min-contig-len 300 -t 96 -1 $i.clip.1.fq.gz -2 $i.clip.2.fq.gz -o ../01assembly/single/$i
date
echo $i is assembled

#geneset
prodigal -i ../02geneset/tmp/contigs.fa -d ../02geneset/tmp/all.fna -q && cd-hit-est -c 0.95 -G 0 -M 0 -d 0 -aS 0.9 -r 1 -T 96 -n 9 -i ../02geneset/tmp/all.fna -o ../02geneset/unique.fa
seqkit translate ../02geneset/unique.fna>../02geneset/unique.faa

#orf abundance
gem-indexer -i ../02geneset/unique.fna -o ../04geneprofile/tmp/geneset  -t 96
for j in $samplelist
do
gem-mapper -I ../04geneprofile/tmp/geneset.gem -t 96 -z -1 $j.clip.1.fq.gz -2 $j.clip.2.fq.gz| samtools view -bS -|samtools sort >../04geneprofile/tmp/$j.bam
samtools index ../04geneprofile/tmp/$j.bam
samtools idxstats ../04geneprofile/tmp/$j.bam >../04geneprofile/tmp/$j.abd && rm ../04geneprofile/tmp/*bai
done
>setwd("$rawpath")
>setwd("../04geneprofile/tmp")
>library(data.table)
>library(dplyr)
>SMP<-c("$(echo $samplelist|sed 's/ /","/g')") #samplelist
>a<-fread(paste(SMP[1],".abd",sep=""),header=F)
>a[,1:2]->a 
>colnames(a)<-c("ORF","length")
>for (i in SMP){
>fread(paste(i,".abd",sep=""),header=F)->b
>left_join(a,b[,c(1,3)],by=c("ORF"="V1"))->a
>}
>colnames(a)[3:(length(SMP)+2)]<-SMP
>a[-which(a[,1]=="*"),]->a
>write.table(a,"DNA.reads",sep="\t",quote=F,row.names=F)
>t(t(1e6*a[,3:(length(SMP)+2)]/t(a[,2]))/colSums(a[,3:(length(SMP)+2)]/t(a[,2])))->c
>data.frame(a[,1],c)->c
>c[-which(rowSums(c[,-1])==0),]->d
>write.table(d,file="../Genetpm.tsv",quote=F,sep="\t",row.names=F)

#kraken
for i in $samplelistdo
kraken2 --threads 96 --db $krakendb --report ../06kraken/single/$i.count --use-mpa-style --report-zero-counts --gzip-compressed --paired $i.clip.1.fq.gz $i.clip.2.fq.gz > $i.sam && rm -f $i.sam
done
>system("awk -F '\t' '{print $1}' *count|sort|uniq >uniq.names")
>    library(tidyverse)
>   read.table("uniq.names",header=F,sep="\t",quote="")->a
> unique(a)->a
>for (i in sample){read.table(paste(i,".count",sep=""),header=F,sep="\t",quote="",fill=T)->b; colnames(b)[2]<-i;left_join(a,b,by="V1")->a;a[!duplicated(a[,1]),]->a;print(i);print(date())}
>a[is.na(a)]<-0
>write.table(a,file="../kraken.xls",row.names=F,col.names=T,quote=F,sep="\t")
>read.csv("id2lineage",header=T)->db
>read.table("taxid.tmp",header=F)->id
>inner_join(id,db,by=c("V2"="tax_id"))->merged
>write.table(merged,"../nr.xls",row.names=F,col.names=T,quote=F,sep="\t")

#KEGG
ruby kofam_scan-1.3.0/exec_annotation -o ../03annotation/unique.kegg.txt --format mapper ../02geneset/unique.faa --cpu 48
rm -rf tmp
>library(dplyr)
>library(data.table)
>fread("unique.kegg.kegg_anno.xls",header=T,sep="\t")->kegg
>fread("../04geneprofile/Genetpm.tsv",header=T,sep="\t")->genetpm
>data.frame(kegg)->kegg
>data.frame(genetpm)->genetpm
>inner_join(kegg,genetpm,by=c("gene_id"="ORF"))->merged
>merged[which(merged$K_id!=""),]->merged
>write.table(merged,file="../04geneprofile/kegg/kegg.all.xls",sep="\t",col.names=T,row.names=F,quote=F)
>paste(merged$pathway_id, merged$pathway_desc, sep=":")->merged$level_3
>select(merged,dim(merged)[2],everything())->merged
>merged[,-c(2,4:6)]->merged
>colnames(merged)[1:4]->j
>for (t in 1:4){
>aggregate(as.formula(paste("merged[,5:dim(merged)[2]]%>%as.matrix~",j[t],sep="")),merged,sum)%>%>>>>write.table(file=paste("../04geneprofile/kegg/",j[t],".xls",sep=""),quote=F,row.names=F,col.names=T,sep="\t")
>}

#CAZY&Hydrogenase
for i in dbCAN-HMMdb-V11.hmm hyd.hmm
do

for j in *faa
do
echo "hmmscan --cpu 1 --domtblout ../../03annotation/$i.$j.hyd.out /mnt/data/database/Hydrogenase/hmm/$i $j > ../../03annotation/hyd.tmp && sh /mnt/data/database/CAZy/hmmscan-parser.sh ../../03annotation/$i.$j.hyd.out >> ../../03annotation/cazyred/$i.hyd.txt" >$i.$j.shh
rm ../03annotation/hyd.tmp
echo "bash $i.$j.shh" >> $i.shh
done
cat ../../03annotation/cazyred/$i.hyd.txt | awk '$5<1e-15&&$10>0.35' >../../03annotation/cazyred/$i.hyd.final
done

>library(data.table)
>library(dplyr)
>j<-c("$t")
>list<-c(2,4,5,6,7)
>fread("Genetpm.tsv",sep="\t",header=T)->DNA
>fread("../03annotation/cazyred/$t",sep="\t",header=F)->eggnog
>inner_join(eggnog,DNA,by=c("V3"="ORF"))->merged
>merged[,-c(2,4,5,6,7,8,9,10)]->merged
>write.table(merged,file="cazyred/$t.all.xls",col.names=T,row.names=F,quote=F,sep="\t")
>aggregate(merged[,3:dim(merged)[2]]%>%as.matrix~V1,merged,sum)%>%write.table(file="cazyred/$t.xls",quote=F,row.names=F,append = F,col.names=T,sep="\t")

#Contributor analysis
library(data.table)
fread("kegg.all.xls",sep="\t",header=T)->keggall
keggcarbon<-keggall[which(keggall$level_2=="Carbohydrate metabolism"),]
 fread("../../06kraken/nr.xls",sep="\t",header=T)->nr
 library(dplyr)
left_join(keggcarbon,nr[,c(1,4)],by=c("gene_id"="V1"))->merged
merged<-merged[,-c(1:7)]
merged%>%as.data.frame->merged
result <- aggregate(merged[,-dim(merged)[2]]%>%as.matrix ~ phylum, data = merged, sum)

#Deseq2 Statistics
library(DESeq2)
library(dplyr)
exp_brca<-read.table("clipboard",sep="\t",header = T, row.names = 1) 
group <-read.table("clipboard",header = T,row.names=1)
group$group<-factor(group$group,levels = c("Health", "SARA"))
row.names(group)<-paste0("X",row.names(group))
dds <- DESeqDataSetFromMatrix(countData = exp_brca,
                              colData = group,      
                              design = ~ group)        
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds, contrast = c("group", levels(group$group)))
resOrdered <- res[order(res$padj), ]
DEG <- as.data.frame(resOrdered)
DEG_deseq2 <- na.omit(DEG)
write.table(DEG_deseq2,file="deseq2.txt")

#random frog
importmatplotlib.pyplotasplt
importnumpyasnp
importpandasaspd
fromauswahlimportRandomFrog
mydata=pd.read_clipboard()
mydata=mydata.to_numpy()
np.random.seed(1337)
X=mydata[:,:-1]
Y=mydata[:,-1]
n_iterations=99999
rf=RandomFrog(n_features_to_select=2,n_iterations=n_iterations,n_jobs=5,random_state=123)
rf.fit(X,Y)
df=rf.frequencies_/n_iterations
dfx=np.arange(X.shape[1])
np.savetxt('output.csv',df,delimiter=',')
np.savetxt('outputx.csv',dfx,delimiter=',')


